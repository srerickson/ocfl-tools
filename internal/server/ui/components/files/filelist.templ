package files

import (
	"github.com/srerickson/ocfl-tools/internal/server/model"
	"github.com/srerickson/ocfl-tools/internal/server/ui/components/icon"
	"github.com/srerickson/ocfl-tools/internal/server/ui/components/table"
	"github.com/srerickson/ocfl-tools/internal/server/ui/components/tooltip"
	"github.com/srerickson/ocfl-tools/internal/server/utils"
)

templ List(files *model.FileTree) {
	@table.Table() {
		@table.Caption()
		@table.Header() {
			@table.Row() {
				@table.Head() {
					@Breadcrumbs(files)
				}
				@table.Head() {
					Size
				}
				@table.Head() {
					Digest
				}
			}
		}
		@table.Body() {
			if files.Parent != nil {
				@table.Row() {
					@table.Cell() {
						<div class="flex flex-nowrap gap-2">
							<div>
								@icon.FolderOpen(icon.Props{Color: "gray"})
							</div>
							<div>
								<a
									href={ utils.ObjectPath(files.ObjectID, files.Version(), files.Parent.Path()) }
									class="text-blue-600 hover:text-blue-800"
								>..</a>
							</div>
						</div>
					}
					@table.Cell()
					// size
					@table.Cell()
					// details
				}
			}
			for tree := range files.Children() {
				@table.Row() {
					@table.Cell() {
						@fileListItem(tree)
					}
					@table.Cell() {
						@fileSize(tree)
					}
					@table.Cell() {
						@fileDigest(tree)
					}
				}
			}
		}
	}
}

templ fileListItem(tree *model.FileTree) {
	<div class="flex flex-nowrap gap-2">
		if tree.IsDir() {
			<div>
				@icon.FolderOpen(icon.Props{Color: "gray"})
			</div>
			<div>
				<a href={ utils.ObjectPath(tree.ObjectID, tree.Version(), tree.Path()) } class="text-blue-600 hover:text-blue-800">
					{ tree.Name }
				</a>
			</div>
		} else {
			<div>
				@icon.File(icon.Props{Color: "gray"})
			</div>
			<div>
				<a
					href={ utils.DownloadPath(tree.ObjectID, tree.File.Path) }
					class="text-blue-600 hover:text-blue-800"
					download={ tree.Name }
				>
					{ tree.Name }
				</a>
			</div>
		}
	</div>
}

templ fileSize(node *model.FileTree) {
	if node.File != nil && node.File.Info != nil {
		{ utils.FileSize(node.File.Info.Size()) }
	}
}

templ fileDigest(node *model.FileTree) {
	if node.File != nil && node.File.Digests != nil {
		{{
			alg := node.File.Algorithm.ID()
			digest := node.File.Digests[alg]
		}}
		@tooltip.Tooltip() {
			@tooltip.Trigger(tooltip.TriggerProps{
				For: alg + node.Name,
			}) {
				<div class="p-1 font-mono text-xs">{ utils.ShortDigest(digest) } </div>
			}
			@tooltip.Content(tooltip.ContentProps{
				ID:            alg + node.Name,
				Position:      tooltip.PositionTop,
				HoverDelay:    500,
				HoverOutDelay: 100,
			}) {
				<span class="font-mono text-xs">
					{ alg }:{ digest }
				</span>
			}
		}
	}
}
